"use strict";(self.webpackChunksocon_docs=self.webpackChunksocon_docs||[]).push([[7881],{5314:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var t=s(4848),i=s(8453);const a={},r="SoCon Hub",o={id:"hub/index",title:"SoCon Hub",description:"Hubs play a central role in the SoCon ecosystem, forming a distributed network of servers designed to store and validate SoCon data. Here's an overview of the key concepts related to SoCon Hubs:",source:"@site/docs/hub/index.md",sourceDirName:"hub",slug:"/hub/",permalink:"/hub/",draft:!1,unlisted:!1,editUrl:"https://github.com/Social-Continent/docs/tree/main/docs/hub/index.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"SoCon Accounts",permalink:"/accounts"},next:{title:"Message",permalink:"/hub/message"}},c={},h=[{value:"What are Hubs?",id:"what-are-hubs",level:2},{value:"Hub Design",id:"hub-design",level:2},{value:"Validation and Storage",id:"validation-and-storage",level:2},{value:"Replication",id:"replication",level:2},{value:"Consistency",id:"consistency",level:2},{value:"Peer Scoring",id:"peer-scoring",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Storage Engine:",id:"storage-engine",level:3},{value:"Sync Engine:",id:"sync-engine",level:3}];function l(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"socon-hub",children:"SoCon Hub"}),"\n",(0,t.jsxs)(n.p,{children:["Hubs play a central role in the SoCon ecosystem, forming a distributed network of servers designed to store and validate SoCon data. Here's an overview of the key concepts related to SoCon Hubs:\n",(0,t.jsx)(n.img,{alt:"hub architecture",src:s(3325).A+"",width:"752",height:"637"})]}),"\n",(0,t.jsx)(n.h2,{id:"what-are-hubs",children:"What are Hubs?"}),"\n",(0,t.jsx)(n.p,{children:"Hubs are servers that run software to become part of the SoCon network. They store and validate both onchain Socon data from Ethereum and offchain Socon data from other Hubs. Each Hub maintains a copy of all Socon data, making it accessible through an API. Hubs serve as the gateway for reading and writing data to SoCon, and anyone building a SoCon app needs to interact with them."}),"\n",(0,t.jsx)(n.h2,{id:"hub-design",children:"Hub Design"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Syncing Data:"})," A Hub begins by syncing data from Socon contracts on the Optimism blockchain, becoming aware of every user's account and their associated keys."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Lifecycle of a SoCon Message:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Alice creates a new message (e.g., "Hello World!").'}),"\n",(0,t.jsx)(n.li,{children:"Alice or her app signs the message with an account key."}),"\n",(0,t.jsx)(n.li,{children:"Alice or her app uploads the message to a Hub."}),"\n",(0,t.jsx)(n.li,{children:"The Hub validates the message's signature and ensures it adheres to the specified message type requirements."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"hub architecture",src:s(1011).A+"",width:"2704",height:"1160"})}),"\n",(0,t.jsx)(n.h2,{id:"validation-and-storage",children:"Validation and Storage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Validation:"})," Messages are validated by checking for a valid signature from the account key and adherence to message type requirements, as outlined in the protocol spec."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Storage:"})," Messages are checked for conflicts before being stored. Conflicts may arise due to various reasons, such as an existing copy of the message or rent payment limitations. Conflicts are resolved deterministically and asynchronously using Conflict-Free Replicated Data Types (CRDTs)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"replication",children:"Replication"}),"\n",(0,t.jsx)(n.p,{children:"Hubs synchronize using a two-phase process:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Gossip:"})," Hubs gossip messages to their peers immediately upon receiving and storing them, leveraging libp2p's gossipsub protocol."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Diff Sync:"})," Periodically, Hubs perform a diff sync with a random peer to identify dropped messages efficiently. The diff sync process compares merkle tries of message hashes."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"consistency",children:"Consistency"}),"\n",(0,t.jsx)(n.p,{children:"Hubs maintain strong eventual consistency. Even if a Hub is temporarily disconnected, it can safely recover when back online. However, messages may arrive out of order, a trade-off for ensuring robustness."}),"\n",(0,t.jsx)(n.h2,{id:"peer-scoring",children:"Peer Scoring"}),"\n",(0,t.jsx)(n.p,{children:"Hubs monitor the behavior of their peers and assign scores based on factors like message acceptance, falling behind, or excessive gossiping. Peers with unfavorable scores may be ignored by their peers."}),"\n",(0,t.jsxs)(n.p,{children:["Explore the detailed guide on ",(0,t.jsx)(n.a,{href:"#",children:"setting up and running a Hub"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsxs)(n.p,{children:["A Hub functions as responsible for receiving data from clients, other hubs, and Socon contracts. It comprises three primary components:\n",(0,t.jsx)(n.img,{alt:"hub architecture",src:s(5760).A+"",width:"733",height:"384"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Storage Engine: This component validates incoming messages' signatures and schemas. It then merges these messages into a coherent state and stores this state persistently on disk."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"P2P Engine: Responsible for engaging in gossip with other hubs to exchange the latest messages on the network."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sync Engine: Facilitates synchronization between two hubs in cases where gossip messages fail to deliver."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"storage-engine",children:"Storage Engine:"}),"\n",(0,t.jsx)(n.p,{children:"The Storage Engine verifies the signature and schema integrity of each received message. It determines the valid signers for a user by monitoring Socon contract events and employs this information to authenticate each message."}),"\n",(0,t.jsx)(n.p,{children:"Validated messages are amalgamated into a Set, a data structure representing the user's current data state on the network. This Set utilizes CRDTs (Conflict-Free Replicated Data Types) to ensure that merging messages remains commutative, associative, and idempotent. Consequently, regardless of the order in which two hubs receive a set of messages, they will consistently converge to the same state."}),"\n",(0,t.jsx)(n.p,{children:"Upon a successful state transition, an event is dispatched to both the sync and P2P engines. The updated state is persisted to disk using RocksDB, ensuring that the Hub can restore its state if it crashes. Additionally, the state can be recovered from an external store, streamlining the process of launching new hubs."}),"\n",(0,t.jsx)(n.h3,{id:"sync-engine",children:"Sync Engine:"}),"\n",(0,t.jsx)(n.p,{children:"The Sync Engine employs a Merkle Patricia Trie to monitor the known set of messages. During communication between two hubs, this engine compares both tries to retrieve any new messages."}),"\n",(0,t.jsx)(n.p,{children:"Upon the Storage Engine's persistence of a message, a unique timestamp hash key is generated by combining the message's timestamp and hash. These keys ensure that the trie maintains chronological order from left to right. As messages generally arrive chronologically, most insertions occur on the right-hand side of the tree, expediting the process of tree diffing."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1011:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/hub-architecture-538bd87cb1153fd93c000f096102db80.png"},3325:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/overall-architecture-df46ea8fecde55b6f139a0d2e3311a37.png"},5760:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/socon-hub-architecture-2f60bb32399e9075bb7a17509e46d079.png"},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);