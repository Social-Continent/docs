"use strict";(self.webpackChunksocon_docs=self.webpackChunksocon_docs||[]).push([[871],{3282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(4848),s=n(8453);const i={},a="Bundle Registry",o={id:"smart-contracts/bundle-registry",title:"Bundle Registry",description:"The BundleRegistry smart contract facilitates the registration and management of bundles within the SoCon decentralized application ecosystem. It is designed to handle the registration of user identifiers (sid) and usernames (sname) in a secure and decentralized manner. The contract is divided into distinct phases, each catering to specific registration scenarios.",source:"@site/docs/smart-contracts/bundle-registry.md",sourceDirName:"smart-contracts",slug:"/smart-contracts/bundle-registry",permalink:"/docs/smart-contracts/bundle-registry",draft:!1,unlisted:!1,editUrl:"https://github.com/Social-Continent/docs/tree/main/docs/smart-contracts/bundle-registry.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Smart Contracts",permalink:"/docs/smart-contracts/"},next:{title:"Id Registry",permalink:"/docs/smart-contracts/id-registry"}},d={},c=[{value:"Functionalities",id:"functionalities",level:2},{value:"1. Bundle Registration",id:"1-bundle-registration",level:3},{value:"2. Trusted Bundle Registration",id:"2-trusted-bundle-registration",level:3},{value:"3. Trusted Caller Management",id:"3-trusted-caller-management",level:3},{value:"Events",id:"events",level:2}];function l(e){const t={h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"bundle-registry",children:"Bundle Registry"}),"\n",(0,r.jsx)(t.p,{children:"The BundleRegistry smart contract facilitates the registration and management of bundles within the SoCon decentralized application ecosystem. It is designed to handle the registration of user identifiers (sid) and usernames (sname) in a secure and decentralized manner. The contract is divided into distinct phases, each catering to specific registration scenarios."}),"\n",(0,r.jsx)(t.h2,{id:"functionalities",children:"Functionalities"}),"\n",(0,r.jsx)(t.h3,{id:"1-bundle-registration",children:"1. Bundle Registration"}),"\n",(0,r.jsx)(t.p,{children:"Function: register\nDescription: Registers a user by associating their sid (identifier), sname (username), recovery address, and a custom URL.\nParameters:\nto: User's address\nrecovery: Recovery address\nurl: Custom URL associated with the user\nusername: User's username (sname)"}),"\n",(0,r.jsx)(t.h3,{id:"2-trusted-bundle-registration",children:"2. Trusted Bundle Registration"}),"\n",(0,r.jsx)(t.p,{children:"Function: partialTrustedRegister\nDescription: Allows partial registration during specific phases, where registration of sname is restricted to a trusted caller (SoCon Invite Server).\nParameters:\nto: User's address\nrecovery: Recovery address\nurl: Custom URL associated with the user\nusername: User's username (sname)\ninviter: Identifier of the inviter"}),"\n",(0,r.jsx)(t.p,{children:"Function: trustedRegister\nDescription: Enables trusted registration, where both sid and sname are registered only by the trusted caller (SoCon Invite Server).\nParameters:\nto: User's address\nrecovery: Recovery address\nurl: Custom URL associated with the user\nusername: User's username (sname)\ninviter: Identifier of the inviter\nReturns: The identifier (sid) of the registered user"}),"\n",(0,r.jsx)(t.p,{children:"Function: trustedBatchRegister\nDescription: Batch registers multiple users during network migration, allowing only the trusted caller to perform the registration.\nParameters:\nusers: An array of BatchUser struct, each containing the user's address and username."}),"\n",(0,r.jsx)(t.h3,{id:"3-trusted-caller-management",children:"3. Trusted Caller Management"}),"\n",(0,r.jsx)(t.p,{children:"Function: changeTrustedCaller\nDescription: Allows the contract owner to change the trusted caller address, which has authority over trusted registration functions.\nParameters:\nnewTrustedCaller: New address to set as the trusted caller."}),"\n",(0,r.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,r.jsx)(t.p,{children:"Event: ChangeTrustedCaller\nDescription: Emitted when the trusted caller address is changed by the contract owner.\nParameters:\ntrustedCaller: New trusted caller address\nowner: Address of the contract owner\nSecurity Considerations\nAccess to trusted registration functions is restricted to a single trusted caller.\nOwnership control is implemented through OpenZeppelin's Ownable contract.\nAuthorization checks are performed to ensure that only authorized entities can execute critical functions."}),"\n",(0,r.jsx)(t.p,{children:"Deployment:\nDeploy the BundleRegistry.sol contract to the desired blockchain network."}),"\n",(0,r.jsx)(t.p,{children:"Initialization:\nProvide the addresses of the required registry contracts (IdRegistry and NameRegistry) and set the initial trusted caller address during deployment."}),"\n",(0,r.jsx)(t.p,{children:"Registration:\nCall the register function to register a user during the final Mainnet phase.\nUse partialTrustedRegister and trustedRegister functions for phased registrations, where sname registration is restricted to the trusted caller."}),"\n",(0,r.jsx)(t.p,{children:"Trusted Caller Management:\nOnly the contract owner can change the trusted caller address by calling the changeTrustedCaller function."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);